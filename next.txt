# Install pnpm globally
npm install -g pnpm

Image Optimizing
Font Optimizing

Navigation Optimizing:
	next/link
	Patter: Showing active links

usePathname() [next/navigation] - react hook to read current url of the page.

'use client' - tells to run to browser not on the server. Adding this to file will treat it as client component

clsx - is a small tool that helps you easily combine CSS class names based on conditions

Fetching Data:

fetching whole data structure example code snippet:
const revenue = await fetchRevenue();

fetching specific properties of the data strcture is like this:
const {
  numberOfInvoices,
  numberOfCustomers,
  totalPaidInvoices,
  totalPendingInvoices,
} = await fetchCardData();

Waterfall Pattern
- Satisft a condition before make the next request

Parallel Data Fetching
- initiate all data requests at the same time 

Static Rendering
 data fetching and rendering happens on the server at build time (when you deploy) or when revalidating data.

Dynamic Rendering
 content is rendered on the server for each user at request time (when the user visits the page). 

Streaming 
 is a data transfer technique that allows you to break down a route into smaller "chunks" and progressively stream them from the server to the client as they become ready.

loading.tsx 
 is a special Next.js file built on top of React Suspense. It allows you to create fallback UI to show as a replacement while page content loads.

loading skeleton 
 is a simplified version of the UI. Many websites use them as a placeholder (or fallback) to indicate to users that the content is loading.

React Suspense
 allows you to defer rendering parts of your application until some condition is met (e.g. data is loaded). You can wrap your dynamic components in Suspense. Then, pass it a fallback component to show while the dynamic component loads.

Url Search Param - where user input into url param like example.com/dashboard/invoices?query=Jerwin "Jerwin" is the user input

Debouncing
  is a programming practice that limits the rate at which a function can fire. In our case, you only want to query the database when the user has stopped typing
to install debounce
pnpm i use-debounce

Pagination in URL param

Tip: If you're working with forms that have many fields, you may want to consider using the entries() method with JavaScript's Object.fromEntries().

Zod 
 is a TypeScript-first validation library. Using Zod, you can define schemas you can use to validate data, from a simple string to a complex nested object.

import { redirect } from "next/navigation";
 if you want to redirect after a function is executed

 import { revalidatePath } from 'next/cache';
  it invalidates or refreshes the cached data for a specific path (like /dashboard/invoices), so the next time someone visits that path, it shows fresh, updated content.

error.tsx 
  A special file can be used to define a UI boundary for a route segment. It serves as a catch-all for unexpected errors and allows you to display a fallback UI to your users.

notFound function
 can be used when you try to fetch a resource that doesn't exist.

Accessibility
 eslint - use to catch accessibility error
 input validation - to ensure consistent data input to your database and avoid hacker bypass in your inputs
 

----------------------------------------------------------
https://nextjs.org/learn/dashboard-app/adding-authentication


Authentication
 is about making sure the user is who they say they are. You're proving your identity with something you have like a username and password.

Authorization 
 is the next step. Once a user's identity is confirmed, authorization decides what parts of the application they are allowed to use.


NextAuth.js 
 to add authentication to your application.
 - pnpm i next-auth@beta

 Secret key
  is used to encrypt cookies, ensuring the security of user sessions

Generate Secret Key
 https://generate-secret.vercel.app/32

To make the auth work also in production you need to update your environment variable in your vercel project

NextAuth.js. providers 
 is an array where you list different login options such as Google or GitHub.

Alternative auth providers:
  https://authjs.dev/getting-started/authentication/oauth


----------------------------------------------------------
https://nextjs.org/learn/dashboard-app/adding-metadata

Metadata (enhance seo)
 provides additional details about a webpage. 
 This hidden information is crucial for search engines and other systems that need to understand your webpage's content better.

Title Metadata
 <title>Page Title</title>

Description Metadata: This metadata provides a brief overview of the webpage content and is often displayed in search engine results.
 <meta name="description" content="A brief description of the page content." />

Keyword Metadata: his metadata includes the keywords related to the webpage content, helping search engines index the page.
 <meta name="keywords" content="keyword1, keyword2, keyword3" />

Open Graph Metadata: This metadata enhances the way a webpage is represented when shared on social media platforms, providing information such as the title, description, and preview image.
 <meta property="og:title" content="Title Here" />
 <meta property="og:description" content="Description Here" />
 <meta property="og:image" content="image_url_here" />
     
title.template 
 field in the metadata object to define a template for your page titles

More about metadata:
 https://nextjs.org/docs/app/api-reference/functions/generate-metadata





--------------------------------------------
Learn more about nextjs

Next.js Documentation:
 https://nextjs.org/docs

Next.js Templates:

 Admin Dashboard Template
  https://vercel.com/templates/next.js/admin-dashboard-tailwind-postgres-react-nextjs
 
 Next.js Commerce
  https://vercel.com/templates/next.js/nextjs-commerce

 Blog Starter Kit
  https://vercel.com/templates/next.js/blog-starter-kit

 AI Chatbot
  https://vercel.com/templates/next.js/nextjs-ai-chatbot
 
 Image Gallery Starter
  https://vercel.com/templates/next.js/image-gallery-starter

 Nextjs YT
  https://www.youtube.com/@VercelHQ/videos


